package generator

import (
	"fmt"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/descriptorpb"
	"strings"
)

type endpointGenerator struct {
	*Generator
	gen  *protogen.Plugin
	file *protogen.File
	g    *protogen.GeneratedFile
}

// GenerateFileContent generates the gRPC service definitions, excluding the package statement.
func (m endpointGenerator) GenerateFileContent() {
	if len(m.file.Services) == 0 {
		return
	}

	for _, service := range m.file.Services {
		if GetIsEndpointExtension(service.Desc.Options()) {
			m.genService(service)
		}
	}
}

func (m endpointGenerator) genService(service *protogen.Service) {

	m.g.Unskip()

	m.genImpl(service)
	m.genConstructor(service)
	m.genDefinition(service)

	for _, method := range service.Methods {
		m.genMethodHandler(service, method)
	}
}

func (m endpointGenerator) genHeader(packageName string) {
	m.g.P("// Code generated by protoc-gen-go-ras. DO NOT EDIT.")
	m.g.P()
	m.g.P("package ", packageName)
	m.g.P()
}
func (m endpointGenerator) genImpl(service *protogen.Service) {

	m.g.P("type ", m.getClientImp(service), " interface {")
	for _, method := range service.Methods {
		m.g.P("", method.GoName, m.genMethodSig(method))
	}

	m.g.P()
	m.g.P("}")

	m.AddImpl(m.getClientImp(service), m.file.GoImportPath)

}

func (m endpointGenerator) genMethodSig(method *protogen.Method) string {

	ext := GetClientMethodExtension(method.Desc.Options())

	inParam := ""
	outParam := "(*" + m.g.QualifiedGoIdent(method.Output.GoIdent) + ", error)"
	if len(ext.MethodParams) > 0 {

		var p []string
		for varName, varValue := range ext.MethodParams {
			p = append(p, fmt.Sprintf("%s %s", varName, m.g.QualifiedGoIdent(m.GetImpl(varValue))))
		}

		inParam = strings.Join(p, ", ")
	}

	if ext.IgnoreEmpty {
		outParam = "error"
	}

	return fmt.Sprintf("(%s) %s", inParam, outParam)
}

func (m endpointGenerator) genConstructor(service *protogen.Service) {
	clientServiceImpl := m.GetImpl("ClientServiceImpl")
	endpointImpl := m.GetImpl("EndpointImpl")

	serviceName := m.getClientName(service)

	m.g.P("func New", serviceName, "(clientService ", clientServiceImpl, ", endpoint ", endpointImpl, ") ", m.getClientImp(service), "{")
	m.g.P("return &", serviceName, "{")
	m.g.P("endpoint,")
	m.g.P("clientService,")
	m.g.P("}")
	m.g.P("}")

}

func (m endpointGenerator) genDefinition(service *protogen.Service) {
	serviceName := m.getClientName(service)
	clientServiceImpl := m.GetImpl("ClientServiceImpl")
	endpointImpl := m.GetImpl("EndpointImpl")

	m.g.P("// ", serviceName, " is the endpoint service for RAS service.")
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		m.g.P("//")
		m.g.P(deprecationComment)
	}
	m.g.Annotate(serviceName, service.Location)
	m.g.P("type ", serviceName, " struct {")
	m.g.P("", endpointImpl, "")
	m.g.P("client ", clientServiceImpl, "")
	m.g.P("}")
	m.g.P()
}

func isEmptyPb(m protoreflect.MessageDescriptor) bool {
	return m.FullName() == "google.protobuf.Empty"
}
func (m endpointGenerator) genMethodHandler(service *protogen.Service, method *protogen.Method) {
	_ = GetClientMethodExtension(method.Desc.Options())

	m.g.P("func (x *", m.getClientName(service), ") ", method.GoName, m.genMethodSig(method), " {")
	m.g.P("reqMessage, err := x.NewMessage(req)")
	m.g.P("if err != nil { return err }")
	m.g.P("if respMessage, err := x.client.EndpointMessage(reqMessage); err == nil {")
	m.g.P("return x.UnpackMessage(respMessage, resp)")
	m.g.P("}")
	m.g.P("return err")
	m.g.P("}")
}

func (m endpointGenerator) getClientName(service *protogen.Service) string {
	return service.GoName
}

func (m endpointGenerator) getClientImp(service *protogen.Service) string {
	return service.GoName + "Impl"
}

func (m endpointGenerator) getClientOptionsName(service *protogen.Service) string {
	return service.GoName + "Options"
}

func (m endpointGenerator) getClientOptionName(service *protogen.Service) string {
	return service.GoName + "Option"
}

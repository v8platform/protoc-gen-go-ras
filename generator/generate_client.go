package generator

import (
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
	"strings"
)

type clientGenerator struct {
	*Generator
	gen  *protogen.Plugin
	file *protogen.File
	g    *protogen.GeneratedFile
}

// GenerateFileContent generates the gRPC service definitions, excluding the package statement.
func (m clientGenerator) GenerateFileContent() {
	if len(m.file.Services) == 0 {
		return
	}

	for _, service := range m.file.Services {
		if GetIsClientExtension(service.Desc.Options()) {
			m.genService(service)
		}
	}
}

func (m clientGenerator) genService(service *protogen.Service) {

	m.g.Unskip()

	m.genClientImpl(service)
	m.genClientConstructor(service)
	m.genClientDefinition(service)
	m.genDetectSupportedVersion(service)

	for _, method := range service.Methods {
		m.genMethodHandler(service, method)
	}
}

func (m clientGenerator) genHeader(packageName string) {
	m.g.P("// Code generated by protoc-gen-go-ras. DO NOT EDIT.")
	m.g.P()
	m.g.P("package ", packageName)
	m.g.P()
}
func (m clientGenerator) genClientImpl(service *protogen.Service) {

	m.g.P("type ", m.getClientServiceImp(service), " interface {")
	for _, method := range service.Methods {
		m.g.P("", method.GoName, "(ctx ", ctxPackage.Ident("Context"), ", req *", method.Input.GoIdent, ", opts ...interface{}) (*", method.Output.GoIdent, ", error)")
	}
	m.g.P("}")
	m.g.P()
	m.AddImpl(m.getClientServiceImp(service), m.file.GoImportPath)

	m.g.P("type Request func(ctx ", ctxPackage.Ident("Context"), ", handler RequestHandler, opts ...interface{}) error")
	m.g.P()
	m.g.P("type RequestHandler func(ctx ", ctxPackage.Ident("Context"), ", rw ", ioPackage.Ident("ReadWriter"), ") error")
	m.g.P()
	m.g.P("type ", getClientImp(), " interface {")
	m.g.P("Request(ctx ", ctxPackage.Ident("Context"), ", handler RequestHandler, opts ...interface{}) error")
	m.g.P("GetEndpoint(ctx ", ctxPackage.Ident("Context"), ") (Endpoint, error)")
	m.g.P("}")
	m.g.P()
	m.g.P()
	m.g.P("type Endpoint interface {")
	m.g.P(" GetVersion() int32 ")
	m.g.P(" GetId() int32 ")
	m.g.P("}")
	m.g.P()

	m.AddImpl(m.getClientImp(), m.file.GoImportPath)

}

func (m clientGenerator) genClientConstructor(service *protogen.Service) {
	serviceName := m.getClientName(service)

	m.g.P("func New", serviceName, "(client ", getClientImp(), ") ", m.getClientServiceImp(service), "{")
	m.g.P("return ", unexport(serviceName), "{")
	m.g.P("cc: client,")
	m.g.P("}")
	m.g.P("}")

}

func (m clientGenerator) genClientDefinition(service *protogen.Service) {
	serviceName := m.getClientName(service)

	m.g.P("// ", serviceName, " is the client for RAS service.")
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		m.g.P("//")
		m.g.P(deprecationComment)
	}
	m.g.Annotate(serviceName, service.Location)
	m.g.P("type ", unexport(serviceName), " struct {")
	m.g.P("cc ", getClientImp(), "")
	m.g.P("}")
	m.g.P()
}

func (m clientGenerator) genDetectSupportedVersion(service *protogen.Service) {
	serviceName := m.getClientName(service)

	m.g.Annotate(serviceName, service.Location)
	m.g.P("var serviceVersions = []string{\"3.0\", \"4.0\", \"5.0\", \"6.0\", \"7.0\", \"8.0\", \"9.0\", \"10.0\"}")
	m.g.P()
	m.g.P("var re = ", regexpPackage.Ident("MustCompile"), "(`(?m)supported=(.*?)]`)")
	m.g.P()
	m.g.P("// DetectSupportedVersion func helpers detect supported version in EndpointFailureAck")
	m.g.P("func DetectSupportedVersion(err error) string {")
	m.g.P()
	m.g.P("fail, ok := err.(*", m.ObjectNamed("ras.protocol.v1.EndpointFailureAck").GoIdent, ")")
	m.g.P("if !ok { return \"\" }")
	m.g.P()
	m.g.P("if fail.Cause == nil { return \"\" }")
	m.g.P()
	m.g.P("matches := re.FindAllString(fail.Cause.Message, -1)")
	m.g.P()
	m.g.P("if len(matches) == 0 { return \"\" }")
	m.g.P()
	m.g.P("supported := matches[0]")
	m.g.P("for i := len(serviceVersions) - 1; i >= 0; i-- {")
	m.g.P("version := serviceVersions[i]")
	m.g.P("if ", stringsPackage.Ident("Contains"), "(supported, version) { return version }")
	m.g.P("}")
	m.g.P()
	m.g.P("return \"\"")
	m.g.P("}")
	m.g.P()
}

func (m clientGenerator) genMethodHandler(service *protogen.Service, method *protogen.Method) {

	m.g.P("func (x ", unexport(m.getClientName(service)), ") ", method.GoName, "(ctx ", ctxPackage.Ident("Context"), ", req *", method.Input.GoIdent, ", opts... interface{}) (*", method.Output.GoIdent, ", error) {")
	m.g.P("return ", m.getMethodHandlerName(method), "(ctx, x.cc.Request, req, opts...)")
	m.g.P("}")
	m.g.P()
	m.g.P("func ", m.getMethodHandlerName(method), "(ctx ", ctxPackage.Ident("Context"), ", cc Request, req *", method.Input.GoIdent, ", opts... interface{}) (*", method.Output.GoIdent, ", error) {")
	m.g.P()
	m.g.P("resp := new(", method.Output.GoIdent, ")")
	if isEmptyPb(method.Output.Desc) {
		m.g.P("if err := cc(ctx, ", method.Input.GoIdent.GoImportPath.Ident("PacketRequestHandler"), "(req, nil), opts...); err != nil {")
	} else {
		m.g.P("if err := cc(ctx, ", method.Input.GoIdent.GoImportPath.Ident("PacketRequestHandler"), "(req, resp), opts...); err != nil {")
	}
	m.g.P("return nil, err")
	m.g.P("}")
	m.g.P("return resp, nil")
	m.g.P("}")
	m.g.P()
}

func (m clientGenerator) getClientName(service *protogen.Service) string {
	return service.GoName
}

func (m clientGenerator) getClientImp() string {
	return getClientImp()
}

func getClientImp() string {
	return "Client"
}

func (m clientGenerator) getClientServiceImp(service *protogen.Service) string {
	return service.GoName
}

func (m clientGenerator) getMethodHandlerName(method *protogen.Method) string {
	return method.GoName + "Handler"
}

func unexport(s string) string { return strings.ToLower(s[:1]) + s[1:] }

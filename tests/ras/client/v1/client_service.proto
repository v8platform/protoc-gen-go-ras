syntax = "proto3";

package ras.client.v1;
import "google/protobuf/empty.proto";
import "ras/protocol/v1/connect.proto";
import "ras/protocol/v1/endpoint.proto";
import "client.proto";
import "ras.proto";
option go_package = "github.com/v8platform/protoc-gen-go-ras/tests/gen/ras/client/v1";


service ClientService {

  option(client).is_client = true;

  rpc Negotiate(protocol.v1.NegotiateMessage) returns (google.protobuf.Empty) {
      option(method).no_packet_pack = true;
  };
  rpc Connect(protocol.v1.ConnectMessage) returns (protocol.v1.ConnectMessageAck) {};
  rpc Disconnect(protocol.v1.DisconnectMessage) returns (google.protobuf.Empty) {};

  rpc EndpointOpen(protocol.v1.EndpointOpen) returns (protocol.v1.EndpointOpenAck) {};
  rpc EndpointClose(protocol.v1.EndpointClose) returns (google.protobuf.Empty) {};
  rpc EndpointMessage(protocol.v1.EndpointMessage) returns (protocol.v1.EndpointMessage) {};

}

message EndpointImpl {
  option(ras.encoding.client_options).impl = true;
}

message ClientImpl {
  option(ras.encoding.client_options).impl = true;
}

message EndpointCreateRequest {
  ClientImpl client = 1;
  protocol.v1.EndpointOpenAck endpoint_open_ack = 2;
}